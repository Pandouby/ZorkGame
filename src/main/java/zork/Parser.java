package zork;/* * author:  Michael Kolling, Version: 1.0, Date: July 1999 * refactoring: Rinaldo Lanza, September 2020 * refactoring: Alex Smolders */import java.util.Scanner;public class Parser {    private Scanner keyBoard;    private CommandWords validCommandWords;    //private InputStream inputStream;    public Parser(Scanner keyBoard) {        this.keyBoard = keyBoard;        this.validCommandWords = new CommandWords();    }    /**     *  Checks command given, returns the values given     * @return Command     */    public Command getCommand() {        String inputLine;        String word1;        String word2;        System.out.print("> ");        inputLine = keyBoard.nextLine();        String[] tokens = inputLine.split(" ");        switch (tokens.length) {            case 2:                if (validCommandWords.isCommand(tokens[0])) {                    return new Command(tokens[0], tokens[1]);                } else {                    // TODO: refactor this                    return new Command(null, tokens[1]);                }            case 1:                if (validCommandWords.isCommand(tokens[0])) {                    return new Command(tokens[0]);                } else {                    // TODO: refactor this and that                    return new Command(null);                }            default:                // TODO: handle this error with an exception and non                break;        }        // TODO: handle error        return new Command(null);    }    /**     *     * @return all commands     */    public String showCommands() {        return validCommandWords.showAll();    }}